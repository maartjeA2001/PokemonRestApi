@page "/fetchdata"
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (pokemonResponse == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var typeNames = pokemonResponse.Types.ToDictionary(t => t.typeId, t => t.typeName);
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Attack</th>
                <th>Types</th>
                <th>Ability</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pokemon in pokemonResponse.Pokemons)
            {
                <tr>
                    <td>@pokemon.pokemonName</td>
                    <td>@pokemon.baseStats.atk</td>
                    <td>@string.Join(", ", pokemon.pokemonTypeIds.Select(t => typeNames[t]))</td>
                    <td>@string.Join(", ", @pokemon.abilities.Select(a => a.abilityName))</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PokemonResponse? pokemonResponse;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.PostAsJsonAsync("api/pokemon", new FilterModel { Amount = 100 });
        response.EnsureSuccessStatusCode();
        pokemonResponse = await response.Content.ReadFromJsonAsync<PokemonResponse>();
    }
}
