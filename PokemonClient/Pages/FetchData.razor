@page "/fetchdata"
@inject HttpClient Http

<h1>Pokemon listings </h1>

<p>This component demonstrates fetching data from the server.</p>

<form @onsubmit="FetchPokemonData">
    <p>Filters:</p>
    <label>Ability: <input @bind="abilityName" class="form-control" /></label>
    <label>Type: <input @bind="typeName" class="form-control" /></label>
    <label>Limit: <input @bind="limit" type="number" class="form-control" /></label>
    <p>
        <button type="submit" class="btn btn-primary">Search</button>
    </p>
</form>
<div class="form-check form-switch">
    <input @bind="showId" type="checkbox">
    <label> ID </label>
    <input @bind="showTypes" type="checkbox">
    <label> Types </label>
    <input @bind="showAbil" type="checkbox">
    <label> Abilities </label>
    <input @bind="showHeight" type="checkbox">
    <label> Height </label>
    <input @bind="showWeight" type="checkbox">
    <label> Weight </label>
    <input @bind="showStats" type="checkbox">
    <label> Stats </label>
</div>
<table class="table">
    <thead>
        <tr>
            @if (showId){ <th><a @onclick="@(() => ChangeSortOrder("PokemonId"))">Id</a></th> }
            
            <th><a @onclick="@(() => ChangeSortOrder("Name"))">Name</a></th>
            @if (showTypes){ <th>Types</th> }
            @if (showAbil){ <th>Abilities</th> }
            @if (showHeight) { <th><a @onclick="@(() => ChangeSortOrder("Height"))">Height</a></th> }
            @if (showWeight){ <th><a @onclick="@(() => ChangeSortOrder("Weight"))">Weight</a></th> }
            @if(showStats)
            { 
                <th @onclick="@(() => ChangeSortOrder("Hp"))">Hp</th>
                <th @onclick="@(() => ChangeSortOrder("Atk"))">Atk</th>
                <th @onclick="@(() => ChangeSortOrder("Def"))">Def</th>
                <th @onclick="@(() => ChangeSortOrder("Sp_Atk"))">Sp Atk</th>
                <th @onclick="@(() => ChangeSortOrder("Sp_Def"))">Sp Def</th>
                <th @onclick="@(() => ChangeSortOrder("Spd"))">Speed</th>
            }
        </tr>
    </thead>
    <tbody>
    @if (pokemonResponse != null)
    {
            var typeNames = pokemonResponse.Types.ToDictionary(t => t.typeId, t => t.typeName);
        @foreach (var pokemon in pokemonResponse.Pokemons)
        {
        <tr>
            @if (showId){ <td>@pokemon.pokemonId</td> }

            <td>@ToUpper(pokemon.pokemonName)</td>

            @if (showTypes) { <td>@string.Join(", ", pokemon.pokemonTypeIds.Select(t => typeNames[t]))</td> }
            @if (showAbil) { <td>@string.Join(", ", @pokemon.abilities.Select(a => a.abilityName))</td> }
            @if (showHeight) { <td>@pokemon.height</td> }
            @if (showWeight) { <td>@pokemon.weight</td> }
            @if (showStats)
            {
                <td>@pokemon.baseStats.hp</td>
                <td>@pokemon.baseStats.atk</td>
                <td>@pokemon.baseStats.def</td>
                <td>@pokemon.baseStats.spAtk</td>
                <td>@pokemon.baseStats.spDef</td>
                <td>@pokemon.baseStats.speed</td>
            }
        </tr>
        }
    }
    </tbody>
</table>

@if (isLoading)
{
<div class="d-flex justify-content-center">
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
</div>
}
else if (pokemonResponse.Pokemons.Length == 0)
{
    <p>No results</p>
}

@code {
    bool showStats = true;
    bool showTypes = true;
    bool showId = true;
    bool showHeight = true;
    bool showWeight = true;
    bool showAbil = true;



    int limit = 10;
    string abilityName = "";
    string typeName = "";
    bool isLoading = false;

    private PokemonResponse? pokemonResponse;
    private SortOrder sortOrder = new SortOrder { };

    protected override async Task OnInitializedAsync()
    {
        await FetchPokemonData();
    }

    async Task FetchPokemonData()
    {
        isLoading = true;
        var response = await Http.PostAsJsonAsync("api/pokemon", new FilterModel
        {
            Amount = limit,
            CanHaveAbility = string.IsNullOrEmpty(abilityName) ? Array.Empty<string>() : new[] { abilityName },
            HasType = string.IsNullOrEmpty(typeName) ? Array.Empty<string>() : new[] { typeName },
            Sort = sortOrder
        }); ; ;
        response.EnsureSuccessStatusCode();

        pokemonResponse = await response.Content.ReadFromJsonAsync<PokemonResponse>();
        isLoading = false;
    }

    string ToUpper(string lowerString)
    {
        return char.ToUpper(lowerString[0]) + lowerString.Substring(1);
    }

    private async Task ChangeSortOrder(string orderInput)
    {
        if (sortOrder.FieldName.ToString().Equals(orderInput))
            sortOrder.Descending = !sortOrder.Descending;
        else
        {
            sortOrder.FieldName = !Enum.TryParse<Field>(orderInput, out Field name) ? Field.PokemonId : Enum.Parse<Field>(orderInput);
            sortOrder.Descending = true;
        }


        await FetchPokemonData();
    }
}
