@page "/fetchdata"
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<form @onsubmit="FetchPokemonData">
    <p>Filters:</p>
    <label>Ability: <input @bind="abilityName" class="form-control" /></label>
    <label>Type: <input @bind="typeName" class="form-control" /></label>
    <label>Limit: <input @bind="limit" type="number" class="form-control" /></label>
    <button type="submit" class="btn btn-primary">Search</button>
</form>
<table class="table">
    <thead>
        <tr>
            <th><a @onclick="@(() => ChangeSortOrder("Name"))">Name</a></th>
            <th>Types</th>
            <th>Abilities</th>
            <th @onclick="@(() => ChangeSortOrder("Hp"))">Hp</th>
            <th @onclick="@(() => ChangeSortOrder("Atk"))">Atk</th>
            <th @onclick="@(() => ChangeSortOrder("Def"))">Def</th>
            <th @onclick="@(() => ChangeSortOrder("Sp_Atk"))">Sp Atk</th>
            <th @onclick="@(() => ChangeSortOrder("Sp_Def"))">Sp Def</th>
            <th @onclick="@(() => ChangeSortOrder("Spd"))">Speed</th>
        </tr>
    </thead>
    <tbody>
    @if (pokemonResponse == null)
    {
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
    else if (pokemonResponse.Pokemons.Length == 0)
    {
        <p>No results</p>
    }
    else
    {
        var typeNames = pokemonResponse.Types.ToDictionary(t => t.typeId, t => t.typeName);
        @foreach (var pokemon in pokemonResponse.Pokemons)
        {
            <tr>
                <td>@ToUpper(pokemon.pokemonName)</td>
                <td>@string.Join(", ", pokemon.pokemonTypeIds.Select(t => typeNames[t]))</td>
                <td>@string.Join(", ", @pokemon.abilities.Select(a => a.abilityName))</td>
                <td>@pokemon.baseStats.hp</td>
                <td>@pokemon.baseStats.atk</td>
                <td>@pokemon.baseStats.def</td>
                <td>@pokemon.baseStats.spAtk</td>
                <td>@pokemon.baseStats.spDef</td>
                <td>@pokemon.baseStats.speed</td>
            </tr>
        }
    }
    </tbody>
</table>

@code {
        int limit = 10;
        string abilityName = "";
        string typeName = "";

    private PokemonResponse? pokemonResponse;
    private SortOrder sortOrder = new SortOrder { };

    protected override async Task OnInitializedAsync()
    {
        await FetchPokemonData();
    }

    async Task FetchPokemonData()
    {
        pokemonResponse = null;

        var response = await Http.PostAsJsonAsync("api/pokemon", new FilterModel
        {
            Amount = limit,
            CanHaveAbility = string.IsNullOrEmpty(abilityName) ? Array.Empty<string>() : new[] { abilityName },
            HasType = string.IsNullOrEmpty(typeName) ? Array.Empty<string>() : new[] { typeName },
            Sort = sortOrder
        }); ; ;
        response.EnsureSuccessStatusCode();
        pokemonResponse = await response.Content.ReadFromJsonAsync<PokemonResponse>();
    }

    string ToUpper(string lowerString)
    {
        return char.ToUpper(lowerString[0]) + lowerString.Substring(1);
    }

    private async Task ChangeSortOrder(string orderInput)
    {
        if (sortOrder.FieldName.ToString().Equals(orderInput))
            sortOrder.Descending = !sortOrder.Descending;
        else
        {
            sortOrder.FieldName = !Enum.TryParse<Field>(orderInput, out Field name) ? Field.PokemonId : Enum.Parse<Field>(orderInput);
            sortOrder.Descending = true;
        }


        await FetchPokemonData();
    }
}
